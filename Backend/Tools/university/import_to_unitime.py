# Backend/Tools/university/import_to_unitime.py

import os
import sys
import requests
from pydantic import BaseModel, Field

# --- Project Path Setup ---
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../.."))
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

from Backend.tool_framework.base_tool import BaseTool

# --- Pydantic Input Schema ---
class ImportToUnitimeInput(BaseModel):
    unitime_xml_data: str = Field(..., description="The complete XML data string to be imported into the Unitime system.")

# --- Tool Class Definition ---
class ImportToUnitimeTool(BaseTool):
    """
    A tool that takes XML data and sends it to the Unitime dataexchange API endpoint for processing.
    """
    name: str = "Import_Data_to_Unitime"
    description: str = "Use this tool to import the final XML data generated by the AI model into the Unitime system."
    args_schema = ImportToUnitimeInput
    
    def _execute(self, unitime_xml_data: str) -> str:
        api_url = self.get_tool_config("UNITIME_API_URL")
        api_key = self.get_tool_config("UNITIME_API_KEY")

        if not api_url or not api_key:
            return "Error: Unitime API URL or API Key is not configured in the environment."

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/xml"
        }
        try:
            response = requests.post(api_url, data=unitime_xml_data.encode('utf-8'), headers=headers)
            response.raise_for_status()  # This will raise an HTTPError for bad responses (4xx or 5xx)
            return f"Successfully imported data to Unitime. Server response: {response.text}"
        except requests.exceptions.HTTPError as http_err:
            return f"Error: HTTP error occurred during Unitime import: {http_err} - Response: {http_err.response.text}"
        except requests.exceptions.RequestException as req_err:
            return f"Error: A critical request error occurred during Unitime import: {req_err}"